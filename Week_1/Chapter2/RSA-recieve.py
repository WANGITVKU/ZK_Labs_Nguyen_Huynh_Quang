# 3_decrypt.py
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding

# Nh·∫≠p private key PEM t·ª´ m√†n h√¨nh
print("üîê D√°n private key PEM (k·∫øt th√∫c b·∫±ng d√≤ng tr·ªëng):")
lines = []
while True:
    line = input()
    if line.strip() == "":
        break
    lines.append(line)
private_pem_str = "\n".join(lines).encode()

private_key = serialization.load_pem_private_key(private_pem_str, password=None)

# Nh·∫≠p ciphertext (hex)
ciphertext_hex = input("Nh·∫≠p ciphertext (hex): ")
ciphertext = bytes.fromhex(ciphertext_hex)

# Gi·∫£i m√£
plaintext = private_key.decrypt(
    ciphertext,
    padding.OAEP(
        mgf=padding.MGF1(hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# In k·∫øt qu·∫£
print("\n‚úÖ D·ªØ li·ªáu ƒë√£ gi·∫£i m√£:")
print(plaintext.decode("utf-8"))
