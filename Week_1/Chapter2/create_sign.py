# 1_sign.py
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes, serialization

# Nh·∫≠p n·ªôi dung c·∫ßn k√Ω
message = input("Nh·∫≠p d·ªØ li·ªáu c·∫ßn k√Ω: ").encode('utf-8')

# T·∫°o kh√≥a RSA
private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
public_key = private_key.public_key()

# T·∫°o ch·ªØ k√Ω s·ªë
signature = private_key.sign(
    message,
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA256()),
        salt_length=padding.PSS.MAX_LENGTH
    ),
    hashes.SHA256()
)

# In ra
print("\nüîê PRIVATE KEY:")
print(private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.TraditionalOpenSSL,
    encryption_algorithm=serialization.NoEncryption()
).decode())

print("\nüîì PUBLIC KEY:")
print(public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
).decode())

print("\n‚úçÔ∏è CH·ªÆ K√ù (HEX):")
print(signature.hex())
