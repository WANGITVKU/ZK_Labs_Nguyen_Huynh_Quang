1. 🧮 RSA (Rivest–Shamir–Adleman)
🔹 Nguyên lý:
Dựa vào độ khó của việc phân tích số nguyên lớn thành thừa số nguyên tố.
Cặp khóa: (n, e) là public key, (n, d) là private key.
✅ Ưu điểm:
Dễ hiểu, triển khai rộng rãi.
Hỗ trợ cả mã hóa và chữ ký số.
Được dùng trong TLS/SSL, SSH, email, chữ ký file…
❌ Nhược điểm:
Khóa dài, tốc độ chậm hơn các thuật toán hiện đại.
Với cùng mức bảo mật, kích thước khóa lớn hơn nhiều so với ECDSA.
2. 🧾 DSA (Digital Signature Algorithm)
🔹 Nguyên lý:
Dựa trên bài toán logarithm rời rạc (discrete logarithm problem) trên trường hữu hạn.
✅ Ưu điểm:
Chuẩn hóa bởi chính phủ Mỹ (FIPS 186).
Tối ưu cho chữ ký số.
❌ Nhược điểm:
Không hỗ trợ mã hóa.
Không an toàn nếu dùng số ngẫu nhiên kém (ví dụ lỗi trên Android 2010).
Hiện ít dùng vì ECDSA tốt hơn.
3. 🔁 ElGamal
🔹 Nguyên lý:
Dựa trên logarithm rời rạc, tương tự DSA.
Dùng để mã hóa chứ không phải chữ ký số.
✅ Ưu điểm:
Tính năng homomorphic (áp dụng trong crypto voting, zero-knowledge).
❌ Nhược điểm:
Bản mã dài gấp đôi plaintext.
Kém phổ biến hơn RSA.
4. 🌐 ECC (Elliptic Curve Cryptography)
🔹 Nguyên lý:
Dựa trên bài toán logarit rời rạc trên đường cong elliptic.
ECC là nền tảng cho nhiều thuật toán: ECDSA, ECDH, Ed25519.
✅ Ưu điểm:
Bảo mật cao hơn với kích thước khóa nhỏ hơn.
Ví dụ: ECC 256-bit ≈ RSA 3072-bit.
Rất phù hợp với thiết bị IoT, blockchain.
❌ Nhược điểm:
Triển khai khó hơn (đòi hỏi hiểu sâu về đại số).
Có thể lỗi nếu không dùng thư viện đúng.
5. ✍️ ECDSA (Elliptic Curve Digital Signature Algorithm)
🔹 Nguyên lý:
Biến thể của DSA dùng đường cong elliptic.
✅ Ưu điểm:
Nhỏ gọn, nhanh, ký và xác minh cực nhanh.
Được dùng rộng rãi trong:
Bitcoin, Ethereum (secp256k1)
JWT, SSH, TLS
❌ Nhược điểm:
Nhạy cảm với lỗi sinh số ngẫu nhiên.
Không hỗ trợ mã hóa (chỉ ký/xác minh).
6. ⚡ Ed25519 (EdDSA)
🔹 Nguyên lý:
Phiên bản hiện đại và an toàn của ECDSA.
Sử dụng đường cong Curve25519 và sinh số ngẫu nhiên cố định (deterministic).
✅ Ưu điểm:
Cực nhanh, an toàn, không dễ bị lỗi ngẫu nhiên.
Bảo mật cao hơn, hiệu năng vượt trội.
Rất phổ biến trong:
SSH (OpenSSH mặc định)
Blockchain mới (Solana, Polkadot...)
❌ Nhược điểm:
Không tương thích ngược RSA.
Không dùng để mã hóa, chỉ dùng để ký.
🔏 CHỮ KÝ SỐ RSA HOẠT ĐỘNG NHƯ THẾ NÀO?
🔑 1. Cặp khóa RSA
RSA sử dụng 2 khóa:
Private Key (🔐): dùng để ký dữ liệu (người gửi giữ bí mật).
Public Key (🔓): dùng để xác minh chữ ký (ai cũng có thể có).
✍️ 2. Quá trình tạo chữ ký số (Signing)
Khi người gửi muốn ký một dữ liệu, quá trình như sau:
✅ Bước 1: Băm nội dung
Dữ liệu (message) được băm thành một đoạn mã ngắn cố định (hash) bằng một thuật toán như SHA-256:
hash = SHA256(message)
✅ Bước 2: Mã hóa hash bằng private key
Hash này được mã hóa bằng RSA private key để tạo chữ ký số:
signature = RSA_encrypt(private_key, hash)
✅ Bước 3: Gửi đi
Người gửi gửi cho người nhận:
message
signature
🔍 3. Quá trình xác minh chữ ký (Verification)
Khi người nhận nhận được message và signature, họ làm:
✅ Bước 1: Tính lại hash của message
expected_hash = SHA256(message)
✅ Bước 2: Giải mã chữ ký bằng public key
decrypted_hash = RSA_decrypt(public_key, signature)
✅ Bước 3: So sánh
if expected_hash == decrypted_hash:
    => Chữ ký hợp lệ ✅
else:
    => Chữ ký không hợp lệ ❌