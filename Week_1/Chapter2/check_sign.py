# 2_verify.py
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding

# Nh·∫≠p public key
print("üîì D√°n public key PEM (k·∫øt th√∫c b·∫±ng d√≤ng tr·∫Øng):")
lines = []
while True:
    line = input()
    if line.strip() == "":
        break
    lines.append(line)
public_key_pem = "\n".join(lines).encode()

public_key = serialization.load_pem_public_key(public_key_pem)

# Nh·∫≠p d·ªØ li·ªáu v√† ch·ªØ k√Ω
message = input("Nh·∫≠p n·ªôi dung g·ªëc: ").encode('utf-8')
signature_hex = input("Nh·∫≠p ch·ªØ k√Ω (hex): ")
signature = bytes.fromhex(signature_hex)

# Ki·ªÉm tra ch·ªØ k√Ω
try:
    public_key.verify(
        signature,
        message,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    print("\n‚úÖ CH·ªÆ K√ù H·ª¢P L·ªÜ!")
except Exception:
    print("\n‚ùå CH·ªÆ K√ù KH√îNG H·ª¢P L·ªÜ!")
